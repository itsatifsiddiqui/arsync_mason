
import 'package:firebase_auth/firebase_auth.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';

import '../../utils/utils.dart';
import '../alert_provider.dart';
import '../app_user_provider.dart';
import '../firestore_provider.dart';
import '../router_provider.dart';

final verifyEmailProvider =
    StateNotifierProvider<VerifyEmailNotifier, AsyncValue<void>>((ref) {
      return VerifyEmailNotifier(ref);
    });

class VerifyEmailNotifier extends StateNotifier<AsyncValue<void>> {
  final Ref ref;
  final _auth = FirebaseAuth.instance;

  VerifyEmailNotifier(this.ref) : super(const AsyncValue.data(null));

  Future<void> sendVerificationEmail() async {
    try {
      final user = _auth.currentUser;
      if (user == null) throw 'User not found';

      if (user.emailVerified) {
        ('Email already verified, proceeding with navigation').log();
        ref.read(routerProvider).navigateBasedAuthStatus();
        return;
      }

      await user.sendEmailVerification();
      ('Verification email sent successfully').log();
    } catch (e) {
      ('Error sending verification email: $e').log();
      final message = 'Failed to send verification email. Please try again.';
      ref.showExceptionSnackBar(message);
    }
  }

  Future<void> verifyEmail() async {
    try {
      state = const AsyncValue.loading();

      final user = _auth.currentUser;
      if (user == null) throw 'User not found';

      // Reload user to get latest verification status
      await user.reload();
      final updatedUser = _auth.currentUser;

      if (updatedUser?.emailVerified == false) {
        state = const AsyncValue.data(null);
        final message =
            'Email Not Verified. Please verify your email before continuing.';
        ref.showExceptionSnackBar(message);
        return;
      }

      // Update user's email verification status in Firestore
      final currentUser = ref.read(appUserProvider);
      if (currentUser == null) throw 'User not found';

      ref.read(appUserProvider.notifier).markEmailAsVerified();
      ref.read(firestoreProvider).updateUser(currentUser);
      'Email verified successfully'.log();
      ref.read(routerProvider).navigateBasedAuthStatus();
      state = const AsyncValue.data(null);
    } catch (e) {
      ('Error checking email verification: $e').log();
      state = const AsyncValue.data(null);
      final message = 'Failed to check verification status. Please try again.';
      ref.showExceptionSnackBar(message);
    }
  }

  Future<void> resendVerificationEmail() async {
    try {
      state = const AsyncValue.loading();

      await sendVerificationEmail();

      final message = 'A new verification email has been sent.';
      ref.showSuccessSnackBar(message);

      state = const AsyncValue.data(null);
    } catch (e) {
      ('Error resending verification email: $e').log();
      state = const AsyncValue.data(null);
      final message = 'Failed to resend verification email. Please try again';
      ref.showExceptionSnackBar(message);
    }
  }
}
