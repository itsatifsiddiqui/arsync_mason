import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';

import '../../models/app_user.dart';
import '../../utils/utils.dart';
import 'auth_base_notifier.dart';

final loginWithGoogleProvider =
    StateNotifierProvider<LoginWithGoogleNotifier, AsyncValue<AppUser?>>(
      (ref) => LoginWithGoogleNotifier(ref),
    );

class LoginWithGoogleNotifier extends AuthBaseNotifier<AppUser?> {
  LoginWithGoogleNotifier(super.ref);

  Future<void> signInWithGoogle() async {
    state = const AsyncValue.loading();

    try {
      //Sign In with Google
      final googleSignin = await GoogleSignIn().signIn();
      if (googleSignin == null) {
        state = const AsyncValue.data(null);
        return;
      }

      'Google Sign-In successful. User: ${googleSignin.email}'.log();

      final googleAuth = await googleSignin.authentication;

      //Sign in using Google account
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      //Now sign in with Firebase
      final userCredential = await auth.signInWithCredential(credential);
      final user = userCredential.user;

      if (user == null) throw Exception('User is null');

      final appUser = await processAuthenticatedUser(
        user,
        providerId: 'google.com',
      );
      state = AsyncValue.data(appUser);
    } catch (e, s) {
      handleError(e, s);
    }
  }
}
