import 'package:hooks_riverpod/hooks_riverpod.dart';

import '../../models/app_user.dart';
import '../../utils/utils.dart';
import 'auth_base_notifier.dart';

final loginWithEmailProvider =
    StateNotifierProvider<LoginWithEmailNotifier, AsyncValue<AppUser?>>(
      (ref) => LoginWithEmailNotifier(ref),
    );

class LoginWithEmailNotifier extends AuthBaseNotifier<AppUser?> {
  LoginWithEmailNotifier(super.ref);

  Future<void> loginWithEmailPassword(String email, String password) async {
    state = const AsyncValue.loading();
    try {
      final credential = await auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      final user = credential.user;
      if (user == null) throw Exception('User is null');

      'User Logged In ${user.uid}'.log('Auth_Provider->login');

      final appUser = await processAuthenticatedUser(user);
      appUser?.toJson().log('Auth_Provider->login');
      state = AsyncValue.data(appUser);
    } catch (e, s) {
      handleError(e, s);
    }
  }
}
