import 'package:firebase_auth/firebase_auth.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';

import '../../models/app_user.dart';
import '../../utils/utils.dart';
import '../alert_provider.dart';
import 'auth_base_notifier.dart';

final passwordlessEmailProvider =
    StateNotifierProvider<PasswordlessEmailNotifier, AsyncValue<AppUser?>>(
      (ref) => PasswordlessEmailNotifier(ref),
    );

class PasswordlessEmailNotifier extends AuthBaseNotifier<AppUser?> {
  PasswordlessEmailNotifier(super.ref);

  Future<void> sendSignInLink(String email) async {
    state = const AsyncValue.loading();
    try {
      // Save the email locally to check it when the link is opened
      // You would typically use shared_preferences or flutter_secure_storage for this
      // For demonstration, we'll assume we have a service for this
      await _saveEmailForSignIn(email);

      final actionCodeSettings = ActionCodeSettings(
        url: 'https://yourdomain.page.link/login',
        handleCodeInApp: true,
        androidPackageName: 'com.example.yourapp',
        androidInstallApp: true,
        androidMinimumVersion: '12',
        iOSBundleId: 'com.example.yourapp',
      );

      await auth.sendSignInLinkToEmail(
        email: email,
        actionCodeSettings: actionCodeSettings,
      );

      ref.showSuccessSnackBar('Sign-in link sent to $email');
      state = const AsyncValue.data(null);
    } catch (e, s) {
      handleError(e, s);
    }
  }

  Future<void> signInWithEmailLink(String email, String emailLink) async {
    state = const AsyncValue.loading();
    try {
      if (!auth.isSignInWithEmailLink(emailLink)) {
        throw Exception('Invalid sign-in link');
      }

      final userCredential = await auth.signInWithEmailLink(
        email: email,
        emailLink: emailLink,
      );

      final user = userCredential.user;
      if (user == null) throw Exception('User is null');

      final appUser = await processAuthenticatedUser(user);
      state = AsyncValue.data(appUser);
    } catch (e, s) {
      handleError(e, s);
    }
  }

  Future<void> _saveEmailForSignIn(String email) async {
    // Implementation would depend on how you store data locally
    // For example, using shared_preferences:
    // final prefs = await SharedPreferences.getInstance();
    // await prefs.setString('passwordless_email', email);

    // For now, just log it
    'Saving email for passwordless sign-in: $email'.log();
  }
}
