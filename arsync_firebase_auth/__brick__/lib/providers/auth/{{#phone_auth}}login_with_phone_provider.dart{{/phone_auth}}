import 'package:firebase_auth/firebase_auth.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';

import '../../models/app_user.dart';
import '../../utils/utils.dart';
import 'auth_base_notifier.dart';

final loginWithPhoneProvider =
    StateNotifierProvider<LoginWithPhoneNotifier, AsyncValue<AppUser?>>(
      (ref) => LoginWithPhoneNotifier(ref),
    );

class LoginWithPhoneNotifier extends AuthBaseNotifier<AppUser?> {
  LoginWithPhoneNotifier(super.ref);

  String? _verificationId;

  Future<void> sendOtp(String phoneNumber) async {
    state = const AsyncValue.loading();
    try {
      await auth.verifyPhoneNumber(
        phoneNumber: phoneNumber,
        verificationCompleted: (PhoneAuthCredential credential) async {
          // Auto-verification on Android
          await _signInWithCredential(credential);
        },
        verificationFailed: (FirebaseAuthException e) {
          'Phone verification failed: ${e.message}'.log();
          handleError(e, StackTrace.current);
        },
        codeSent: (String verificationId, int? resendToken) {
          'OTP sent successfully'.log();
          _verificationId = verificationId;
          state = const AsyncValue.data(null);
        },
        codeAutoRetrievalTimeout: (String verificationId) {
          _verificationId = verificationId;
        },
      );
    } catch (e, s) {
      handleError(e, s);
    }
  }

  Future<void> verifyOtp(String smsCode) async {
    state = const AsyncValue.loading();
    try {
      if (_verificationId == null) {
        throw Exception('Verification ID is null. Please send OTP first.');
      }

      final credential = PhoneAuthProvider.credential(
        verificationId: _verificationId!,
        smsCode: smsCode,
      );

      await _signInWithCredential(credential);
    } catch (e, s) {
      handleError(e, s);
    }
  }

  Future<void> _signInWithCredential(PhoneAuthCredential credential) async {
    try {
      final userCredential = await auth.signInWithCredential(credential);
      final user = userCredential.user;

      if (user == null) throw Exception('User is null');

      final appUser = await processAuthenticatedUser(user, providerId: 'phone');
      state = AsyncValue.data(appUser);
    } catch (e, s) {
      handleError(e, s);
    }
  }
}
